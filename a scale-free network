import networkx as nx
# Function to generate a scale-free network and calculate its properties
def generate_and_analyze_network(N, y):
    # Generate a scale-free network using the Barabasi-Albert model
    # The number of edges to attach from a new node to existing nodes is proportional to m.
    m = max(1, int(N**(1/y)))
    G = nx.barabasi_albert_graph(N, m)
    # Calculate network properties
    properties = {}
    if nx.is_connected(G):
        properties['Diameter'] = nx.diameter(G)
        properties['Average Distance'] = nx.average_shortest_path_length(G)
    else:
        properties['Diameter'] = 'Network is not connected'
        properties['Average Distance'] = 'Network is not connected'
    properties['Clustering Coefficient'] = nx.average_clustering(G)
    degrees = [G.degree(n) for n in G.nodes()]
    properties['Maximum Degree'] = max(degrees)
    properties['Minimum Degree'] = min(degrees)
    return properties
# Network sizes and exponent values
network_sizes = [10**2, 10**3, 10**4, 10**5]
exponents = [2.2, 2.5, 3, 4]
# Collecting results in a dictionary
results = {}
for N in network_sizes:
    results[N] = {}
    for y in exponents:
        results[N][y] = generate_and_analyze_network(N, y)
# The results dictionary will contain the properties of the networks for each (N, y) pair.
N=102 和 y=2.2的无标度网络，计算得到的网络参数如下：
直径（Diameter）：3
平均距离（Average Distance）：约 1.974
聚集系数（Clustering Coefficient）：约 0.244
最大度（Maximum Degree）：48
最小度（Minimum Degree）：6
